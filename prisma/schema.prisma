generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  first_name    String?
  last_name     String?
  user_name     String?   @unique @db.VarChar(255)
  unique_code   String?   @unique @db.VarChar(255)
  phone         String?   @db.VarChar(180)
  photo         String?   @db.VarChar(500)
  country       String?   @db.VarChar(180)
  birth_date    DateTime?
  role          Int       @default(2) @db.SmallInt
  status        Int       @default(0) @db.SmallInt
  is_subscribed Int       @default(0) @db.SmallInt

  email_verified Int @default(0) @db.SmallInt
  phone_verified Int @default(0) @db.SmallInt
  gender         Int @default(1) @db.SmallInt

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  UserTokens            UserTokens[]
  UserVerificationCodes UserVerificationCodes[]
  UserPurchase          UserPurchasedPackage[]
  MyDocuments           MyDocuments[]
  MyUploads             MyUploads[]
}

model PackageType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  status      Int       @default(1) @db.SmallInt()
  Package     Package[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Package {
  id                       Int      @id @default(autoincrement())
  name                     String   @db.VarChar(255)
  description              String?
  price                    Decimal  @db.Decimal(19, 2)
  currency                 String   @default("USD") @db.VarChar(20)
  duration                 Int
  type                     Int      @default(1) @db.SmallInt()
  word_tokens              BigInt   @db.BigInt()
  image_tokens             BigInt   @db.BigInt()
  status                   Int      @default(1) @db.SmallInt()
  image_url                String?  @db.VarChar(255)
  total_purchase           BigInt   @default(0)
  token_word_tokens_limit  BigInt   @db.BigInt()
  token_image_tokens_limit BigInt   @db.BigInt()
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  packageType     PackageType            @relation(fields: [package_type_id], references: [id])
  package_type_id Int
  UserPurchase    UserPurchasedPackage[]
}

model ExtendedPackage {
  id                        Int                   @id @default(autoincrement())
  name                      String                @db.VarChar(255)
  description               String?
  price                     Decimal               @db.Decimal(19, 2)
  currency                  String                @default("USD") @db.VarChar(20)
  type                      Int                   @default(1) @db.SmallInt()
  word_tokens               BigInt                @db.BigInt()
  image_tokens              BigInt                @db.BigInt()
  status                    Int                   @default(1) @db.SmallInt()
  image_url                 String?               @db.VarChar(255)
  total_purchase            BigInt                @default(0)
  created_at                DateTime              @default(now())
  updated_at                DateTime              @updatedAt
  user_purchased_package    UserPurchasedPackage? @relation(fields: [user_purchased_package_id], references: [id])
  user_purchased_package_id Int?
}

model PaymentMethod {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  status               Int
  image_url            String?                @db.VarChar(255)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  UserPurchasedPackage UserPurchasedPackage[]
}

model UserPurchasedPackage {
  id                Int      @id @default(autoincrement())
  start_date        DateTime
  end_date          DateTime
  status            Int      @default(1)
  word_tokens       BigInt   @db.BigInt()
  image_tokens      BigInt   @db.BigInt()
  used_word_tokens  BigInt   @db.BigInt()
  used_image_tokens BigInt   @db.BigInt()

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  package           Package           @relation(fields: [package_id], references: [id])
  user              User              @relation(fields: [user_id], references: [id])
  paymentMethod     PaymentMethod     @relation(fields: [payment_method_id], references: [id])
  user_id           Int
  package_id        Int
  payment_method_id Int
  extended_package  ExtendedPackage[]
}

model TemplateCategory {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(255)
  description     String?    @db.VarChar(255)
  parent_id       Int        @default(0)
  status          Int        @default(1) @db.SmallInt()
  is_sub_category Int        @default(0) @db.SmallInt()
  Template        Template[]
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
}

model Template {
  id               Int              @id @default(autoincrement())
  title            String           @db.VarChar(255)
  description      String?
  prompt           String           @db.Text()
  premium          Boolean          @default(true)
  templateCategory TemplateCategory @relation(fields: [sub_category_id], references: [id])
  sub_category_id  Int
  TemplateField    TemplateField[]
  MyDocuments      MyDocuments[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
}

model TemplateField {
  id           Int      @id @default(autoincrement())
  field_name   String   @db.VarChar(255)
  type         Int
  is_required  Boolean  @default(false)
  option_value Json?
  template     Template @relation(fields: [template_id], references: [id])
  template_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model MyDocuments {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(255)
  description        String?
  prompt             String   @db.Text()
  result             String?  @db.Text()
  language           String   @default("english") @db.VarChar(255)
  content_quality    String   @default("good") @db.VarChar(255)
  content_max_length Int      @default(50)
  template           Template @relation(fields: [template_id], references: [id])
  template_id        Int
  user               User     @relation(fields: [user_id], references: [id])
  user_id            Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model MyUploads {
  id           Int      @id @default(autoincrement())
  fieldname    String   @db.VarChar(255)
  originalname String   @db.VarChar(255)
  mimetype     String   @db.VarChar(255)
  file_path    String   @db.VarChar(255)
  filename     String   @db.VarChar(255)
  user         User     @relation(fields: [user_id], references: [id])
  user_id      Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model AdminSettings {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  value String @db.Text()

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserTokens {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @db.VarChar(255)
  family       String   @unique
  browserInfo  String?
  expiresAt    DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserVerificationCodes {
  id         Int      @id @default(autoincrement())
  user_id    Int
  code       String   @unique @db.VarChar(10)
  status     Int      @default(0) @db.SmallInt
  type       Int      @default(1) @db.SmallInt
  expired_at DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
